/**
 * File: notification_service.dart
 * Description: Servi√ßo para gerenciar notifica√ß√µes locais.
 *
 * Responsabilidades:
 * - Gerenciar permiss√µes de notifica√ß√£o
 * - Exibir notifica√ß√µes locais
 * - Simular notifica√ß√µes de boas-vindas
 *
 * Author: Gabriel Teixeira
 * Created on: 29-05-2025
 * Version: 1.0.0
 * Squad: Metamorfose
 */

import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';

class NotificationService {
  static final NotificationService _instance = NotificationService._internal();
  factory NotificationService() => _instance;
  NotificationService._internal();

  final FlutterLocalNotificationsPlugin _localNotifications = FlutterLocalNotificationsPlugin();

  bool _isInitialized = false;

  /// Inicializa o servi√ßo de notifica√ß√µes
  Future<void> initialize() async {
    if (_isInitialized) return;

    try {
      // Configurar notifica√ß√µes locais
      await _setupLocalNotifications();
      
      _isInitialized = true;
      debugPrint('üîî NotificationService inicializado com sucesso');
    } catch (e) {
      debugPrint('‚ùå Erro ao inicializar NotificationService: $e');
    }
  }

  /// Configurar notifica√ß√µes locais
  Future<void> _setupLocalNotifications() async {
    const androidSettings = AndroidInitializationSettings('@mipmap/ic_launcher');
    const iosSettings = DarwinInitializationSettings(
      requestAlertPermission: true,
      requestBadgePermission: true,
      requestSoundPermission: true,
    );
    
    const initSettings = InitializationSettings(
      android: androidSettings,
      iOS: iosSettings,
    );

    await _localNotifications.initialize(
      initSettings,
      onDidReceiveNotificationResponse: (NotificationResponse response) {
        debugPrint('üîî Notifica√ß√£o local tocada: ${response.payload}');
      },
    );

    // Solicitar permiss√µes no Android 13+
    if (Platform.isAndroid) {
      await _localNotifications
          .resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>()
          ?.requestNotificationsPermission();
    }
  }

  /// Exibir notifica√ß√£o local
  Future<void> _showLocalNotification({
    required String title,
    required String body,
    String? payload,
    int id = 0,
  }) async {
    const androidDetails = AndroidNotificationDetails(
      'metamorfose_channel',
      'Metamorfose Notifications',
      channelDescription: 'Notifica√ß√µes do aplicativo Metamorfose',
      importance: Importance.high,
      priority: Priority.high,
      icon: '@mipmap/ic_launcher',
      color: Color(0xFF6B46C1), // Cor roxa do tema
      playSound: true,
      enableVibration: true,
    );

    const iosDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
    );

    const details = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );

    await _localNotifications.show(
      id,
      title,
      body,
      details,
      payload: payload,
    );
  }

  /// Simular notifica√ß√£o de boas-vindas
  Future<void> showWelcomeNotification() async {
    if (!_isInitialized) {
      await initialize();
    }

    // Lista de mensagens de boas-vindas aleat√≥rias
    final welcomeMessages = [
      {
        'title': 'üå± Bem-vindo de volta!',
        'body': 'Sua jornada de transforma√ß√£o continua hoje. Que tal cuidar da sua plantinha?'
      },
      {
        'title': 'ü¶ã Parab√©ns por come√ßar!',
        'body': 'Cada dia √© uma nova oportunidade de crescer. Vamos juntos nessa metamorfose!'
      },
      {
        'title': '‚ú® Hora de brilhar!',
        'body': 'Sua planta est√° ansiosa para te ver. Que tal come√ßar o dia com energia positiva?'
      },
      {
        'title': 'üåü Voc√™ √© incr√≠vel!',
        'body': 'Lembre-se: pequenos passos levam a grandes transforma√ß√µes. Continue assim!'
      },
      {
        'title': 'üíö Metamorfose em a√ß√£o!',
        'body': 'Cada momento que voc√™ est√° aqui √© um passo na dire√ß√£o certa. Orgulhe-se!'
      },
    ];

    // Selecionar mensagem aleat√≥ria
    final random = DateTime.now().millisecondsSinceEpoch % welcomeMessages.length;
    final message = welcomeMessages[random];

    // Aguardar um pouco para simular um comportamento mais natural
    await Future.delayed(const Duration(seconds: 2));

    // Mostrar notifica√ß√£o
    await _showLocalNotification(
      title: message['title']!,
      body: message['body']!,
      payload: 'welcome_home',
      id: 1001, // ID espec√≠fico para notifica√ß√µes de boas-vindas
    );

    debugPrint('üîî Notifica√ß√£o de boas-vindas enviada: ${message['title']}');
  }

  /// Simular notifica√ß√£o de motiva√ß√£o
  Future<void> showMotivationNotification() async {
    if (!_isInitialized) {
      await initialize();
    }

    await _showLocalNotification(
      title: 'üí™ For√ßa e determina√ß√£o!',
      body: 'Voc√™ est√° no caminho certo. Sua planta acredita em voc√™!',
      payload: 'motivation',
      id: 1002,
    );
  }

  /// Simular notifica√ß√£o de cuidado com a planta
  Future<void> showPlantCareNotification() async {
    if (!_isInitialized) {
      await initialize();
    }

    await _showLocalNotification(
      title: 'üåø Sua planta precisa de voc√™!',
      body: 'Que tal dar uma olhada em como ela est√°? Talvez seja hora de reg√°-la.',
      payload: 'plant_care',
      id: 1003,
    );
  }

  /// Verificar se as notifica√ß√µes est√£o habilitadas
  Future<bool> areNotificationsEnabled() async {
    if (Platform.isAndroid) {
      final androidImplementation = _localNotifications
          .resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>();
      return await androidImplementation?.areNotificationsEnabled() ?? false;
    }
    return true; // Para iOS, assumimos que est√£o habilitadas
  }

  /// Solicitar permiss√µes de notifica√ß√£o
  Future<bool> requestPermissions() async {
    if (Platform.isAndroid) {
      final androidImplementation = _localNotifications
          .resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>();
      return await androidImplementation?.requestNotificationsPermission() ?? false;
    }
    return true; // Para iOS, assumimos que est√£o habilitadas
  }

  /// Cancelar notifica√ß√£o espec√≠fica
  Future<void> cancelNotification(int id) async {
    await _localNotifications.cancel(id);
  }

  /// Cancelar todas as notifica√ß√µes
  Future<void> cancelAllNotifications() async {
    await _localNotifications.cancelAll();
  }

  /// Dispose do servi√ßo
  void dispose() {
    // Cleanup se necess√°rio
  }
} 