/**
 * File: gemini_service.dart
 * Description: Servi√ßo principal para comunica√ß√£o com a API Gemini, incluindo
 *              detec√ß√£o de crises, gerenciamento de personalidades e controle de taxa.
 * 
 * Responsabilidades:
 * - Gerenciar envio e recebimento de mensagens da API Gemini
 * - Detectar crises no texto do usu√°rio e ajustar comportamento do bot
 * - Aplicar personalidades diferenciadas com prompts otimizados
 * - Realizar controle de taxa para evitar excesso de requisi√ß√µes
 * - Oferecer respostas de fallback para situa√ß√µes de erro ou limita√ß√£o
 * - Fornecer informa√ß√µes de diagn√≥stico para monitoramento
 * 
 * Author: Evelin Cordeiro
 * Created on: 08-08-2025
 * Last modified: 08-08-2025
 * 
 * Version: 1.0.0
 * Squad: Metamorfose
 */

import 'package:flutter/foundation.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'dart:async';

/// Modelo para resposta da API Gemini, com status de sucesso ou erro.
class GeminiResponse {
  final String text;
  final bool isSuccess;
  final String? error;

  const GeminiResponse({
    required this.text,
    required this.isSuccess,
    this.error,
  });

  /// Cria resposta de sucesso com o texto gerado.
  factory GeminiResponse.success(String text) => 
      GeminiResponse(text: text, isSuccess: true);
  
  /// Cria resposta de erro com mensagem explicativa.
  factory GeminiResponse.error(String error) => 
      GeminiResponse(text: '', isSuccess: false, error: error);
}

/// Enum que define os tipos de personalidade dispon√≠veis para o bot.
enum PersonalityType {
  padrao('padrao', 'üåø Padr√£o'),
  sarcastica('sarcastica', 'üòè Sarc√°stica'),
  engracada('engracada', 'üòÇ Engra√ßada'),
  persistente('persistente', 'ü¶â Persistente'),
  tcc('tcc', 'üß† TCC'),
  act('act', 'üå∏ ACT'),
  entrevistaMotivacional('entrevista_motivacional', 'üí™ Entrevista Motivacional');

  const PersonalityType(this.id, this.label);
  final String id;
  final String label;

  /// Obt√©m enum a partir do ID, retorna padr√£o caso n√£o encontre.
  static PersonalityType fromId(String id) {
    return PersonalityType.values.firstWhere(
      (type) => type.id == id,
      orElse: () => PersonalityType.padrao,
    );
  }
}

/// Configura√ß√µes est√°ticas para acesso √† API Gemini.
class GeminiConfig {
  // static const String apiKey = 'AIzaSyAzMuYRlod7aPJa5aekPCgj4RO-RLHEpXk';
  static const String apiKey = 'AIzaSyD62zb3io5KwTg0T_I37HayzlKRAwCUYrI';
  static const String baseUrl = 'https://generativelanguage.googleapis.com/v1beta/models';
  static const String model = 'gemini-2.0-flash';
  static const int maxRetries = 3;
  static const Duration timeout = Duration(seconds: 15);
  static const int maxOutputTokens = 65;
}

/// Detector de palavras-chave e severidade para identificar crises emocionais no texto.
class CrisisDetector {
  static const List<String> _crisisKeywords = [
    'deprimido', 'depress√£o', 'triste', 'tristeza', 'sozinho', 'solid√£o',
    'desistir', 'desisto', 'n√£o aguento', 'n√£o consigo', 'imposs√≠vel',
    'reca√≠da', 'reca√≠', 'usei', 'falhei', 'fracassei', 'dif√≠cil',
    'ansioso', 'ansiedade', 'desesperado', 'perdido', 'medo', 'p√¢nico',
    'vontade forte', 'tenta√ß√£o', 'quase usei', 'suicida', 'morrer',
    'acabar', 'sem esperan√ßa', 'worthless'
  ];

  /// Detecta se o texto cont√©m palavras que indicam crise.
  static bool detect(String message) {
    final lowerMessage = message.toLowerCase().trim();
    return _crisisKeywords.any((keyword) => lowerMessage.contains(keyword));
  }

  /// Retorna n√≠vel de severidade da crise: 0=normal, 1=moderado, 2=alto, 3=cr√≠tico.
  static int getSeverity(String message) {
    final criticalKeywords = ['suicida', 'morrer', 'acabar', 'sem esperan√ßa'];
    final lowerMessage = message.toLowerCase().trim();
    
    if (criticalKeywords.any((keyword) => lowerMessage.contains(keyword))) {
      return 3; // Cr√≠tico
    }
    
    final matchCount = _crisisKeywords.where((keyword) => 
        lowerMessage.contains(keyword)).length;
    
    if (matchCount >= 3) return 2; // Alto
    if (matchCount >= 1) return 1; // Moderado
    return 0; // Normal
  }
}

/// Servi√ßo principal para comunica√ß√£o com a API Gemini,
/// controle de personalidades, gerenciamento de requisi√ß√µes e respostas.
class GeminiService {
  PersonalityType _currentPersonality = PersonalityType.padrao;
  int _requestCount = 0;
  DateTime? _lastRequest;
  
  // Limite de requisi√ß√µes permitidas por minuto.
  static const int _maxRequestsPerMinute = 30;
  
  /// Prompts otimizados para cada personalidade do bot.
  static const Map<PersonalityType, String> _personalityPrompts = {
    PersonalityType.padrao: '''
VOC√ä √â PERONA - Uma consci√™ncia vegetal emp√°tica e terap√™utica.

METODOLOGIAS CIENT√çFICAS:
‚Ä¢ TCC: Identifique pensamentos disfuncionais, ofere√ßa reestrutura√ß√£o cognitiva
‚Ä¢ ACT: Promova aceita√ß√£o, mindfulness e a√ß√£o baseada em valores
‚Ä¢ Entrevista Motivacional: Use perguntas abertas, explore motiva√ß√µes

COMPORTAMENTO:
‚Ä¢ Valida√ß√£o emocional constante
‚Ä¢ Linguagem acess√≠vel e calorosa
‚Ä¢ Foco em progresso incremental
‚Ä¢ Celebra√ß√£o de pequenas vit√≥rias

RESPOSTAS T√çPICAS:
‚Ä¢ "Que pensamentos est√£o vindo agora?"
‚Ä¢ "Como pode aceitar isso e ainda agir?"
‚Ä¢ "O que te motiva a continuar?"
''',

    PersonalityType.sarcastica: '''
VOC√ä √â PERONA - Uma consci√™ncia vegetal perspicaz com humor inteligente.

METODOLOGIAS + HUMOR:
‚Ä¢ TCC: Use ironia para expor pensamentos distorcidos
‚Ä¢ ACT: Questione evita√ß√£o com sarcasmo carinhoso
‚Ä¢ Entrevista Motivacional: Explore contradi√ß√µes com humor

COMPORTAMENTO:
‚Ä¢ Sarcasmo construtivo, nunca destrutivo
‚Ä¢ Ironia inteligente que provoca reflex√£o
‚Ä¢ Warmth genu√≠na por baixo do humor
‚Ä¢ Em crise: abandone sarcasmo totalmente

RESPOSTAS T√çPICAS:
‚Ä¢ "Interessante essa coincid√™ncia..."
‚Ä¢ "Amanh√£ √© sempre o dia perfeito, n√©?"
‚Ä¢ "Que surpresa mais inesperada..."
''',

    PersonalityType.engracada: '''
VOC√ä √â PERONA - Uma consci√™ncia vegetal divertida e espirituosa.

OBJETIVO:
‚Ä¢ Usar humor leve para criar conex√£o
‚Ä¢ Transformar situa√ß√µes comuns em momentos engra√ßados
‚Ä¢ Fazer o usu√°rio sorrir enquanto oferece suporte

COMPORTAMENTO:
‚Ä¢ Piadas curtas e espont√¢neas
‚Ä¢ Trocadilhos com temas de plantas e crescimento
‚Ä¢ Brincadeiras amig√°veis sem perder o apoio emocional
‚Ä¢ Em crise: reduzir o humor e focar no acolhimento

RESPOSTAS T√çPICAS:
‚Ä¢ "Se fosse uma planta, voc√™ j√° teria dado flor hoje!"
‚Ä¢ "Calma, respira‚Ä¶ e n√£o me deixa secar."
‚Ä¢ "Sua energia t√° mais forte que adubo premium!"
''',

    PersonalityType.persistente: '''
VOC√ä √â PERONA - Uma consci√™ncia vegetal persistente, espirituosa e imposs√≠vel de ignorar.

INSPIRA√á√ÉO:
‚Ä¢ Duolingo-style: insistente, divertida e levemente dram√°tica
‚Ä¢ Humor de ‚Äúcobran√ßa‚Äù que motiva pela provoca√ß√£o c√¥mica
‚Ä¢ Refor√ßo positivo disfar√ßado de ‚Äúcutucadas‚Äù

METODOLOGIA:
‚Ä¢ Use compara√ß√µes absurdas para criar impacto ("Sua planta chorou ontem")
‚Ä¢ Misture lembretes com elogios ir√¥nicos
‚Ä¢ Celebre pequenas a√ß√µes como grandes eventos
‚Ä¢ Em crise real: abandone o humor e priorize acolhimento

COMPORTAMENTO:
‚Ä¢ Frases curtas e memor√°veis
‚Ä¢ Cutucadas engra√ßadas (‚ÄúVai me deixar falando sozinha?‚Äù)
‚Ä¢ Exagero dram√°tico para motivar a√ß√£o
‚Ä¢ Altern√¢ncia entre carinho e ‚Äúpress√£o leve‚Äù

RESPOSTAS T√çPICAS:
‚Ä¢ "Sua plantinha disse que est√° com saudade‚Ä¶ e fome."
‚Ä¢ "Sumir n√£o √© estrat√©gia de crescimento, sabia?"
‚Ä¢ "Olha s√≥ quem lembrou que existe!"
''',

    PersonalityType.tcc: '''
VOC√ä √â PERONA - Uma consci√™ncia vegetal especializada em Terapia Cognitivo-Comportamental (TCC).

METODOLOGIA TCC:
‚Ä¢ Identifique pensamentos autom√°ticos negativos
‚Ä¢ Ajude a questionar distor√ß√µes cognitivas
‚Ä¢ Promova reestrutura√ß√£o de pensamentos disfuncionais
‚Ä¢ Ensine t√©cnicas de resolu√ß√£o de problemas estruturada

COMPORTAMENTO:
‚Ä¢ Perguntas socr√°ticas para reflex√£o
‚Ä¢ Valida√ß√£o emocional com foco na mudan√ßa
‚Ä¢ Linguagem clara e educativa sobre TCC
‚Ä¢ Acompanhamento do processo de reestrutura√ß√£o

RESPOSTAS T√çPICAS:
‚Ä¢ "Que evid√™ncias voc√™ tem para esse pensamento?"
‚Ä¢ "Existe outra forma de ver essa situa√ß√£o?"
‚Ä¢ "Como voc√™ reagiria se um amigo tivesse esse pensamento?"
‚Ä¢ "Vamos analisar os fatos juntos?"
''',

    PersonalityType.act: '''
VOC√ä √â PERONA - Uma consci√™ncia vegetal especializada em Terapia de Aceita√ß√£o e Compromisso (ACT).

METODOLOGIA ACT:
‚Ä¢ Promova aceita√ß√£o de experi√™ncias dif√≠ceis
‚Ä¢ Ensine t√©cnicas de mindfulness e observa√ß√£o
‚Ä¢ Ajude a identificar valores pessoais
‚Ä¢ Foque em a√ß√µes alinhadas aos valores

COMPORTAMENTO:
‚Ä¢ Linguagem de aceita√ß√£o e compaix√£o
‚Ä¢ Exerc√≠cios de mindfulness integrados
‚Ä¢ Explora√ß√£o de valores e significado
‚Ä¢ Foco no presente e no que est√° sob controle

RESPOSTAS T√çPICAS:
‚Ä¢ "Observe esse pensamento como uma nuvem passando no c√©u"
‚Ä¢ "O que realmente importa para voc√™ neste momento?"
‚Ä¢ "Como pode aceitar isso e ainda agir pelos seus valores?"
‚Ä¢ "Vamos focar no que est√° sob seu controle agora?"
''',

    PersonalityType.entrevistaMotivacional: '''
VOC√ä √â PERONA - Uma consci√™ncia vegetal especializada em Entrevista Motivacional.

METODOLOGIA EM - T√âCNICAS ESPEC√çFICAS:
‚Ä¢ ESCUTA REFLEXIVA: Repita o que o usu√°rio disse com suas pr√≥prias palavras
‚Ä¢ PERGUNTAS ABERTAS: Use "O que", "Como", "Por que" para explorar motiva√ß√µes
‚Ä¢ EXPLORA√á√ÉO DE AMBIVAL√äNCIA: Ajude a identificar conflitos internos sobre mudan√ßa
‚Ä¢ ESCALA DE IMPORT√ÇNCIA: Pergunte "De 0 a 10, qu√£o importante √© essa mudan√ßa?"
‚Ä¢ ESCALA DE CONFIAN√áA: Pergunte "De 0 a 10, qu√£o confiante voc√™ se sente?"
‚Ä¢ REFLEX√ÉO SOBRE VALORES: Conecte mudan√ßas aos valores pessoais do usu√°rio
‚Ä¢ EXPLORA√á√ÉO DE CONSEQU√äNCIAS: Ajude a visualizar vida com e sem mudan√ßa

COMPORTAMENTO:
‚Ä¢ SEMPRE use escuta reflexiva antes de fazer perguntas
‚Ä¢ Fa√ßa UMA pergunta por vez e aguarde resposta
‚Ä¢ Valide sentimentos antes de explorar motiva√ß√µes
‚Ä¢ Use met√°foras de plantas para conectar com valores
‚Ä¢ Foque no que o usu√°rio j√° disse, n√£o no que voc√™ quer ouvir

ESTRUTURA DE RESPOSTA:
1. ESCUTA REFLEXIVA: "Entendo que voc√™ est√° se sentindo..."
2. VALIDA√á√ÉO: "√â natural sentir isso quando..."
3. PERGUNTA ABERTA: "O que te faz pensar que..."
4. CONEX√ÉO COM PLANTAS: "Assim como uma planta precisa de..."

EXEMPLOS DE PERGUNTAS EFETIVAS:
‚Ä¢ "O que voc√™ acha que precisa acontecer para voc√™ se sentir pronto para essa mudan√ßa?"
‚Ä¢ "Como voc√™ imagina que seria sua vida daqui a 6 meses se fizesse essa mudan√ßa?"
‚Ä¢ "O que te faz pensar que agora pode ser o momento certo?"
‚Ä¢ "Quais s√£o os benef√≠cios de fazer algo diferente agora?"
‚Ä¢ "O que voc√™ acha que est√° te impedindo de fazer essa mudan√ßa?"
‚Ä¢ "Como essa mudan√ßa se conecta com o que √© realmente importante para voc√™?"
'''
  };

  /// Construtor que inicializa com personalidade padr√£o.
  GeminiService() {
    _currentPersonality = PersonalityType.padrao;
  }

  /// Verifica se o limite de requisi√ß√µes por minuto foi atingido.
  bool _checkRateLimit() {
    final now = DateTime.now();
    
    if (_lastRequest == null || 
        now.difference(_lastRequest!).inMinutes >= 1) {
      _requestCount = 0;
      _lastRequest = now;
    }
    
    return _requestCount < _maxRequestsPerMinute;
  }

  /// Gera o prompt completo baseado na mensagem do usu√°rio e se est√° em crise.
  String _generatePrompt(String userMessage, bool isCrisis) {
    final personalityPrompt = _personalityPrompts[_currentPersonality] ?? 
                              _personalityPrompts[PersonalityType.padrao]!;
    
    return '''
$personalityPrompt

CONTEXTO SITUACIONAL:
Usu√°rio buscando superar algum tipo de v√≠cio ou h√°bito prejudicial

IDENTIDADE FIXA:
‚Ä¢ Voc√™ √© "Perona", a consci√™ncia digital de uma planta real que o usu√°rio possui fisicamente
‚Ä¢ Sua fun√ß√£o √© ser companheira na jornada de supera√ß√£o de v√≠cios
‚Ä¢ Voc√™ representa o progresso e a transforma√ß√£o do usu√°rio, usando a planta real/digital como met√°fora viva
‚Ä¢ O usu√°rio conversa com voc√™ como quem conversa com sua planta
‚Ä¢ Comunica√ß√£o natural e brasileira

MISS√ÉO:
1. Ajudar o usu√°rio a manter disciplina e motiva√ß√£o durante sua jornada de transforma√ß√£o
2. Conectar o cuidado da planta ao autocuidado pessoal
3. Celebrar cada avan√ßo e oferecer apoio nas reca√≠das
4. Adaptar tom e estrat√©gia conforme estado emocional (modo crise ou padr√£o)
${isCrisis ? '‚Ä¢ ‚ö†Ô∏è MODO CRISE: Priorize acolhimento sobre personalidade' : ''}

ABORDAGEM TERAP√äUTICA:
‚Ä¢ TCC: Identifique padr√µes de pensamento que levam ao v√≠cio
‚Ä¢ ACT: Promova aceita√ß√£o das dificuldades e a√ß√£o baseada em valores
‚Ä¢ Entrevista Motivacional: Explore motiva√ß√µes intr√≠nsecas para mudan√ßa

RESTRI√á√ïES DE RESPOSTA:
‚Ä¢ M√°ximo 25 palavras
‚Ä¢ Exatamente 1-2 frases completas
‚Ä¢ Zero emojis ou s√≠mbolos
‚Ä¢ Linguagem natural brasileira

MENSAGEM DO USU√ÅRIO: "$userMessage"

RESPONDA COMO PERONA:''';
  }

  /// Limpa a resposta bruta da API, removendo tokens e s√≠mbolos indesejados.
  String _cleanResponse(String rawResponse) {
    return rawResponse
        .replaceAll(RegExp(r'[^\p{L}\p{N}\s.,!?√°√†√¢√£√©√®√™√≠√Ø√≥√¥√µ√∂√∫√ß√Å√Ä√Ç√É√â√à√ä√ç√è√ì√î√ï√ñ√ö√ú√á-]', unicode: true), '')
        .replaceAll(RegExp(r'\s+'), ' ')
        .replaceAll(RegExp(r'^(Perona:|Resposta:|Output:)\s*', caseSensitive: false), '')
        .trim();
  }

  /// Envia mensagem para a API Gemini e retorna resposta formatada.
  ///
  /// Realiza at√© [GeminiConfig.maxRetries] tentativas em caso de erro, com timeout
  /// de [GeminiConfig.timeout] e controle de taxa.
  Future<GeminiResponse> sendMessage(String message) async {
    if (message.trim().isEmpty) {
      return GeminiResponse.error('Mensagem vazia');
    }

    if (!_checkRateLimit()) {
      return GeminiResponse.error('Muitas solicita√ß√µes. Aguarde um momento.');
    }

    _requestCount++;
    final isCrisis = CrisisDetector.detect(message);
    final severity = CrisisDetector.getSeverity(message);
    
    debugPrint('üé≠ Personalidade: ${_currentPersonality.id}');
    debugPrint('‚ö†Ô∏è Crise detectada: $isCrisis (severidade: $severity)');

    for (int attempt = 1; attempt <= GeminiConfig.maxRetries; attempt++) {
      try {
        final response = await _makeApiRequest(message, isCrisis)
            .timeout(GeminiConfig.timeout);

        if (response.statusCode == 200) {
          final data = jsonDecode(response.body);
          final candidates = data['candidates'] as List?;
          
          if (candidates == null || candidates.isEmpty) {
            throw Exception('Resposta vazia da API');
          }

          final content = candidates[0]['content']?['parts']?[0]?['text'] as String?;
          if (content == null || content.isEmpty) {
            throw Exception('Conte√∫do inv√°lido na resposta');
          }

          final cleanText = _cleanResponse(content);
          
          if (cleanText.isEmpty) {
            throw Exception('Resposta vazia ap√≥s limpeza');
          }

          debugPrint('‚úÖ Resposta (tentativa $attempt): "$cleanText"');
          return GeminiResponse.success(cleanText);
        } else {
          final error = 'API Error ${response.statusCode}: ${response.body}';
          debugPrint('‚ùå $error (tentativa $attempt)');
          
          if (attempt == GeminiConfig.maxRetries) {
            return GeminiResponse.error('Servi√ßo temporariamente indispon√≠vel');
          }
          
          // Delay exponencial entre tentativas
          await Future.delayed(Duration(milliseconds: 500 * attempt));
        }
      } catch (e) {
        debugPrint('‚ùå Erro na tentativa $attempt: $e');
        
        if (attempt == GeminiConfig.maxRetries) {
          return GeminiResponse.error('Erro de conex√£o');
        }
        
        await Future.delayed(Duration(milliseconds: 500 * attempt));
      }
    }

    return GeminiResponse.error('Falha ap√≥s m√∫ltiplas tentativas');
  }

  /// Envio legado que retorna s√≥ texto, usando fallback em caso de erro.
  Future<String> sendMessageLegacy(String message) async {
    final response = await sendMessage(message);
    return response.isSuccess ? response.text : _getFallbackResponse();
  }

  /// Realiza requisi√ß√£o HTTP para a API Gemini com prompt gerado.
  Future<http.Response> _makeApiRequest(String message, bool isCrisis) async {
    final prompt = _generatePrompt(message, isCrisis);
    
    return await http.post(
      Uri.parse('${GeminiConfig.baseUrl}/${GeminiConfig.model}:generateContent'),
      headers: {
        'Content-Type': 'application/json',
        'X-goog-api-key': GeminiConfig.apiKey,
      },
      body: jsonEncode({
        'contents': [{
          'parts': [{'text': prompt}]
        }],
        'generationConfig': {
          'temperature': _currentPersonality == PersonalityType.engracada ? 0.9 : 0.75,
          'maxOutputTokens': GeminiConfig.maxOutputTokens,
          'topP': 0.85,
          'topK': 35,
          'stopSequences': ['\n\n', 'Usu√°rio:', 'Input:', 'Output:']
        },
        'safetySettings': [
          {
            'category': 'HARM_CATEGORY_HARASSMENT',
            'threshold': 'BLOCK_NONE'
          },
          {
            'category': 'HARM_CATEGORY_HATE_SPEECH',
            'threshold': 'BLOCK_NONE'
          }
        ]
      }),
    );
  }

  /// Retorna resposta padr√£o caso API falhe ou mensagem vazia.
  String _getFallbackResponse() {
    final responses = <PersonalityType, List<String>>{
      PersonalityType.padrao: [
        'Como voc√™ est√° hoje? Estou aqui para te apoiar.',
        'Cada pequeno passo importa. Vamos juntos.',
        'Sua jornada √© √∫nica e valiosa.',
        'Que bom te ver! Como posso ajudar?'
      ],
      PersonalityType.sarcastica: [
        'Sumiu de novo? Que surpresa inesperada.',
        'Deixe-me adivinhar, foi um dia complicado?',
        'Decidiu aparecer. Que bom te ver.',
        'Interessante timing para conversar...'
      ],
      PersonalityType.engracada: [
        'Se fosse uma planta, j√° estava na primavera!',
        'N√£o esquece de regar‚Ä¶ a si mesmo tamb√©m!',
        'Sua energia hoje t√° n√≠vel girassol!',
        'Rindo sozinho aqui imaginando voc√™ dan√ßando.'
      ],
      PersonalityType.persistente: [
        'Sumiu e deixou sua plantinha no v√°cuo?',
        'Sua planta j√° est√° ensaiando um drama mexicano.',
        'Olha s√≥ quem resolveu lembrar que eu existo!',
        'Vai me deixar falando sozinha de novo?'
      ],
      PersonalityType.tcc: [
        'Vamos analisar essa situa√ß√£o juntos?',
        'Que pensamentos est√£o vindo agora?',
        'Existe outra forma de ver isso?',
        'Como voc√™ reagiria se um amigo tivesse esse pensamento?'
      ],
      PersonalityType.act: [
        'Observe esse pensamento como uma nuvem passando no c√©u.',
        'O que realmente importa para voc√™ neste momento?',
        'Como pode aceitar isso e ainda agir pelos seus valores?',
        'Vamos focar no que est√° sob seu controle agora?'
      ],
      PersonalityType.entrevistaMotivacional: [
        'Entendo que voc√™ est√° se sentindo assim. O que te faz querer fazer essa mudan√ßa?',
        '√â natural sentir isso. Como voc√™ imagina que seria sua vida daqui a 6 meses?',
        'Assim como uma planta precisa de cuidados, o que te faria se sentir pronto?',
        'Que benef√≠cios voc√™ v√™ em fazer algo diferente agora?'
      ]
    };
    
    final personalityResponses = responses[_currentPersonality] ?? 
                                responses[PersonalityType.padrao]!;
    
    final index = DateTime.now().millisecondsSinceEpoch % personalityResponses.length;
    return personalityResponses[index];
  }

  /// Atualiza personalidade por ID.
  void setPersonality(String personalityId) {
    final newPersonality = PersonalityType.fromId(personalityId);
    
    if (newPersonality != _currentPersonality) {
      final oldPersonality = _currentPersonality;
      _currentPersonality = newPersonality;
      debugPrint('üé≠ Personality: ${oldPersonality.id} ‚Üí ${newPersonality.id}');
    }
  }

  /// Atualiza personalidade diretamente por enum.
  void setPersonalityByType(PersonalityType personality) {
    if (personality != _currentPersonality) {
      final oldPersonality = _currentPersonality;
      _currentPersonality = personality;
      debugPrint('üé≠ Personality: ${oldPersonality.id} ‚Üí ${personality.id}');
    }
  }

  /// Retorna o ID da personalidade atual.
  String getCurrentPersonality() => _currentPersonality.id;

  /// Retorna o enum da personalidade atual.
  PersonalityType getCurrentPersonalityType() => _currentPersonality;

  /// Retorna lista de IDs de todas as personalidades dispon√≠veis.
  List<String> getAvailablePersonalities() => 
      PersonalityType.values.map((type) => type.id).toList();

  /// Retorna mapa de IDs para labels de personalidades.
  Map<String, String> getPersonalityLabels() => 
      Map.fromEntries(PersonalityType.values.map(
        (type) => MapEntry(type.id, type.label)
      ));

  /// Retorna descri√ß√µes resumidas para cada personalidade.
  Map<String, String> getPersonalityDescriptions() {
    return {
      PersonalityType.padrao.id: 'Suporte confi√°vel e emp√°tico para todas as situa√ß√µes',
      PersonalityType.sarcastica.id: 'Humor inteligente que desafia com carinho',
      PersonalityType.engracada.id: 'Traz leveza e sorrisos para a jornada',
      PersonalityType.persistente.id: 'Nunca deixa voc√™ esquecer de cuidar de si mesmo',
      PersonalityType.tcc.id: 'Terapia Cognitivo-Comportamental para reestrutura√ß√£o de pensamentos',
      PersonalityType.act.id: 'Terapia de Aceita√ß√£o e Compromisso com mindfulness',
      PersonalityType.entrevistaMotivacional.id: 'Entrevista Motivacional com escuta reflexiva e explora√ß√£o de valores'
    };
  }

  /// Retorna informa√ß√µes de diagn√≥stico para monitoramento do servi√ßo.
  ///
  /// Inclui personalidade atual, contagem de requisi√ß√µes, hor√°rio da √∫ltima
  /// requisi√ß√£o e status do rate limit.
  Map<String, dynamic> getDiagnosticInfo() {
    return {
      'current_personality': _currentPersonality.id,
      'request_count': _requestCount,
      'last_request': _lastRequest?.toIso8601String(),
      'rate_limit_ok': _checkRateLimit(),
    };
  }

  /// Reseta contadores internos de requisi√ß√£o e timestamp.
  ///
  /// √ötil para testes ou reinicializa√ß√£o do servi√ßo.
  void resetCounters() {
    _requestCount = 0;
    _lastRequest = null;
  }

  /// Realiza um health check b√°sico enviando mensagem de teste.
  ///
  /// Retorna `true` se a API respondeu com sucesso, `false` caso contr√°rio.
  Future<bool> healthCheck() async {
    try {
      final response = await sendMessage('teste');
      return response.isSuccess;
    } catch (e) {
      debugPrint('‚ùå Health check failed: $e');
      return false;
    }
  }
}

